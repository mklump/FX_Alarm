//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// <remarks>
//     This file was intentionally modified to access the MainWindow class and 
//     assosicated MainViewModel XAML UI classes to implement web access through
//     this test tool.
// </remarks>
// <copyright file="MainViewModel.cs" company="PIPs for Heaven, LLC">
//     Copyright (c) PIPs for Heaven, LLC.  All rights reserved.
// </copyright>
//------------------------------------------------------------------------------

namespace FX_Alarm
{
    using System;
    using System.Collections.Generic;
    using System.Text;
    using Microsoft.VisualStudio.TestTools.WebTesting;
    using Microsoft.VisualStudio.TestTools.WebTesting.Rules;
    using Microsoft.VisualStudio.TestTools.WebTesting.RequestPlugins;

    using System.IO;
    using System.Diagnostics;
    using System.Net;
    using System.Net.Mail;
    using System.Security.Cryptography;

    public class GetUrlCoded : WebTest
    {
        /// <summary>
        /// FXArrowAlert field for this WebTest
        /// </summary>
        private string strFXArrowAlert;

        /// <summary>
        /// FXBackUpAlert field for this WebTest
        /// </summary>
        private string strFXBackUpAlert;

        /// <summary>
        /// strUserName field for this WebTest
        /// </summary>
        private string strUserName;

        /// <summary>
        /// Backing field property for this WebTest
        /// </summary>
        private string strPassword;

        /// <summary>
        /// Initializes a new instance of the <see cref="GetUrlCoded" /> class.
        /// </summary>
        public GetUrlCoded()
        {
            StreamReader stream = null;
            try
            {
                string secureFile = GetProjectVar() + "securedata.dat";
                stream = new StreamReader(File.OpenRead(secureFile));
                strUserName = Decrypt(stream.ReadLine(), "@s%^3H8!");
                strPassword = Decrypt(stream.ReadLine(), "@s%^3H8!");
                File.Delete(secureFile);
            }
            catch (Exception) { }
            finally { if (null != stream) stream.Close(); }

            this.Context.Add("WebServer1", "http://www.forexearlywarning.com");
            this.Context.Add("WebServer2", "http://www.theforexheatmap.com");
            this.Context.Add("vchEmail", strUserName);
            this.Context.Add("vchPassword", strPassword);
            this.PreAuthenticate = true;
        }

        public override IEnumerator<WebTestRequest> GetRequestEnumerator()
        {
            // IFF (if and only if credential undefined debugging coded webtest), place them here then immediatly remove it.
            //this.Context["vchEmail"] = "";
            //this.Context["vchPassword"] = "";

            // Modified add username as email through mainViewModel UI reference.
            this.UserName = this.Context["vchEmail"].ToString();
            this.Password = this.Context["vchPassword"].ToString();

            // Initialize validation rules that apply to all requests in the WebTest
            if ((this.Context.ValidationLevel >= Microsoft.VisualStudio.TestTools.WebTesting.ValidationLevel.Low))
            {
                ValidateResponseUrl validationRule1 = new ValidateResponseUrl();
                this.ValidateResponse += new EventHandler<ValidationEventArgs>(validationRule1.Validate);
            }
            if ((this.Context.ValidationLevel >= Microsoft.VisualStudio.TestTools.WebTesting.ValidationLevel.Low))
            {
                ValidationRuleResponseTimeGoal validationRule2 = new ValidationRuleResponseTimeGoal();
                validationRule2.Tolerance = 0D;
                this.ValidateResponseOnPageComplete += new EventHandler<ValidationEventArgs>(validationRule2.Validate);
            }

            WebTestRequest request1 = new WebTestRequest((this.Context["WebServer1"].ToString() + "/"));
            request1.ThinkTime = 1;
            yield return request1;
            request1 = null;

            WebTestRequest request2 = new WebTestRequest((this.Context["WebServer1"].ToString() + "/login.php"));
            request2.ThinkTime = 1;
            request2.Headers.Add(new WebTestRequestHeader("Referer", (this.Context["WebServer1"].ToString() + "/")));
            yield return request2;
            request2 = null;

            // Start login recorder cord
            WebTestRequest request3 = new WebTestRequest((this.Context["WebServer1"].ToString() + "/login.php"));
            request3.ThinkTime = 1;
            request3.Method = "POST";
            request3.ExpectedResponseUrl = (this.Context["WebServer1"].ToString() + "/member-area.php");
            request3.Headers.Add(new WebTestRequestHeader("Referer", (this.Context["WebServer1"].ToString() + "/login.php")));
            FormPostHttpBody request3Body = new FormPostHttpBody();
            request3Body.FormPostParameters.Add("vchEmail", this.Context["vchEmail"].ToString());
            request3Body.FormPostParameters.Add("vchPassword", this.Context["vchPassword"].ToString());
            request3Body.FormPostParameters.Add("x", "29");
            request3Body.FormPostParameters.Add("y", "10");
            request3.Body = request3Body;
            yield return request3;
            request3 = null;
            // End login recorder code

            WebTestRequest request4 = new WebTestRequest((this.Context["WebServer1"].ToString() + "/heatmap.php"));
            request4.Headers.Add(new WebTestRequestHeader("Referer", (this.Context["WebServer1"].ToString() + "/member-area.php")));
            WebTestRequest request4Dependent1 = new WebTestRequest((this.Context["WebServer1"].ToString() + "/get.php"));
            request4Dependent1.Headers.Add(new WebTestRequestHeader("Referer", (this.Context["WebServer1"].ToString() + "/heatmap.php")));
            request4Dependent1.QueryStringParameters.Add("chk", "2", false, false);
            request4.DependentRequests.Add(request4Dependent1);
            // Modified get the last html reponse, and ask for chk=2 request.
            yield return request4;
            WebTestRequest fxBackupAlert = request4Dependent1;
            yield return fxBackupAlert;
            string uri = Uri.UnescapeDataString(LastResponse.BodyString);
            if (uri.Contains("Please login to system."))
                throw new ApplicationException("Please login to system.");
            int uriSubStringStart = uri.IndexOf("src=\"") + "src=\"".Length,
                uriSubStringLength = uri.IndexOf("\"  height") - uriSubStringStart;
            uri = uri.Substring(uriSubStringStart, uriSubStringLength);
            strFXBackUpAlert = uri;
            request4 = null;

            WebTestRequest request5 = new WebTestRequest((this.Context["WebServer1"].ToString() + "/get_v4.php"));
            request5.Headers.Add(new WebTestRequestHeader("Referer", (this.Context["WebServer1"].ToString() + "/heatmap.php")));
            ExtractHiddenFields extractionRule1 = new ExtractHiddenFields();
            extractionRule1.Required = true;
            extractionRule1.HtmlDecode = true;
            extractionRule1.ContextParameterName = "1";
            request5.ExtractValues += new EventHandler<ExtractionEventArgs>(extractionRule1.Extract);
            yield return request5;
            request5 = null;

            // Modified get the last html reponse, and ask for get_v4.php dependent requests.
            uri = Uri.UnescapeDataString(LastResponse.BodyString);
            strFXArrowAlert = RemoveTabNewline(uri);
            strFXArrowAlert = ParseUri(strFXArrowAlert);
            ExaminLastPage(uri);

            WriteFXAlertDat();

            // Current WebTestRequest strfxArrowAlert is the same as request6 which ever is working (do not execute)
            //WebTestRequest webtest = new WebTestRequest(strFXArrowAlert);
            //yield return webtest;

            // Current WebTestRequest request6 is the same as strfxArrowAlert which ever is working (do not execute)
            //WebTestRequest request6 = new WebTestRequest((this.Context["WebServer2"].ToString() + "/new-heat-map/index.php"));
            //request6.ThinkTime = 20;
            //request6.Method = "POST";
            //request6.QueryStringParameters.Add("qc", "22", false, false);
            //FormPostHttpBody request6Body = new FormPostHttpBody();
            //request6Body.FormPostParameters.Add("ak", GetAccessKey(uri));
            //request6.Body = request6Body;
            //yield return request6;
            //request6 = null;

            // TODO: Logout WebTestRequest code (run for now, LogOut() function failed)
            WebTestRequest request7 = new WebTestRequest((this.Context["WebServer1"].ToString() + "/logout.php"));
            request7.ExpectedResponseUrl = (this.Context["WebServer1"].ToString() + "/login.php?err=2");
            request7.Headers.Add(new WebTestRequestHeader("Referer", (this.Context["WebServer1"].ToString() + "/heatmap.php")));
            yield return request7;
            request7 = null;
        }

        /// <summary>
        /// Gets the session access key cookie for the current session
        /// </summary>
        /// <param name="htmlPage">Current found working Uri page</param>
        /// <returns>Session access key cookie for the current session</returns>
        private string GetAccessKey(string htmlPage)
        {
            int uriSubStringStart = htmlPage.IndexOf("name=\"ak\" value=\"") + "name=\"ak\" value=\"".Length,
                uriSubStringLength = htmlPage.IndexOf("\" /></form>") - uriSubStringStart;
            return htmlPage.Substring(uriSubStringStart, uriSubStringLength);
        }

        /// <summary>
        /// Gets the embedded Uri value
        /// </summary>
        /// <param name="htmlPage">Page with the embedded Uri value</param>
        /// <returns>Found embedded Uri</returns>
        private string ParseUri(string htmlPage)
        {
            int uriSubStringStart = htmlPage.IndexOf("action=\"") + "action=\"".Length,
                uriSubStringLength = htmlPage.IndexOf("\" method") - uriSubStringStart;
            return htmlPage.Substring(uriSubStringStart, uriSubStringLength);
        }

        /// <summary>
        /// Removes the tab and newline characters from the given HtmlPage
        /// </summary>
        /// <param name="htmlPage">Page to remove tabe and newline characters from</param>
        /// <returns>Page with tab and newline characters removed</returns>
        private string RemoveTabNewline(string htmlPage)
        {
            string retVal = "";
            if (htmlPage.Contains("Please login to system."))
                throw new ApplicationException("Please login to system.");
            string[] noNewLine = htmlPage.Split('\n', '\t');
            foreach (string line in noNewLine)
                retVal += line;
            return retVal;
        }

        /// <summary>
        /// Writes out to the file FXAlertData.dat file the found results on the first and second line.
        /// </summary>
        private void WriteFXAlertDat()
        {
            StreamWriter datStream = null;
            try
            {
                string strData = GetProjectVar() + "FXAlertData.dat";
                if (true == File.Exists(strData))
                    File.Delete(strData);
                datStream = new StreamWriter(File.OpenWrite(strData));
                datStream.WriteLine(strFXArrowAlert);
                datStream.WriteLine(strFXBackUpAlert);
            }
            catch (Exception e) { throw e; }
            finally
            {
                if (null != datStream)
                    datStream.Close();
            }
        }

        /// <summary>
        /// This function will check to see if the current found FX Alert website Url is the same as the
        /// last found working FX Alert website. If it is not the same, then we have a problem.
        /// Note: This funtion now also sends an email to Matthew James K. as well as a printed message
        /// to the screen if the response found is different from other than saved lastFXAlertPage.html.
        /// </summary>
        /// <param name="newPage">New page contents of the recently read in last response from get_v4.php.</param>
        private void ExaminLastPage(string newPage)
        {
            StreamReader reader = null;
            StreamWriter writer = null;
            try
            {
                string oldPage = GetProjectVar() + "lastFXAlertPage.html", pageContents = "";
                if (File.Exists(oldPage))
                {
                    reader = new StreamReader(File.OpenRead(oldPage));
                    pageContents = reader.ReadToEnd();
                    reader.Close();
                }
                if (string.Empty != pageContents && !pageContents.Contains(strFXArrowAlert))
                {
                    MailMessage message = new MailMessage("FX Alert Tool Client", "mklump@gmail.com", "Alert Site Changed",
                        "The FX Alert website last known as " + ParseUri(pageContents) + " has changed to " + strFXArrowAlert +
                        ". Saving new FX Alert website to " + oldPage);
                    Process uriPCAlert = new Process();
                    uriPCAlert.StartInfo.FileName = "ECHO";
                    uriPCAlert.StartInfo.Arguments = "The FX Alert website last known as " + ParseUri(pageContents) +
                        " has changed to " + strFXArrowAlert + ". Saving new FX Alert website to " + oldPage;
                    uriPCAlert.StartInfo.CreateNoWindow = false;
                    uriPCAlert.StartInfo.UseShellExecute = true;
                    uriPCAlert.StartInfo.WindowStyle = ProcessWindowStyle.Normal;
                    uriPCAlert.Start();
                }
                if (File.Exists(oldPage))
                    File.Delete(oldPage);
                writer = new StreamWriter(File.OpenWrite(oldPage));
                writer.Write(newPage);
            }
            catch (Exception e) { throw e; }
            finally
            {
                if (null != reader)
                    reader.Close();
                if (null != writer)
                    writer.Close();
            }
        }

        /// <summary>
        /// Security decrypts sensitive data in a string.
        /// </summary>
        /// <param name="strText">Sensitive data to decrypt</param>
        /// <param name="strEncrypt">Decryption key</param>
        /// <returns>Decrypted data</returns>
        private string Decrypt(string strText, string strEncrypt)
        {
            byte[] bKey = new byte[20];
            byte[] IV = { 0x30, 0x52, 0x74, 0x96, 0xB2, 0xC9, 0xEB, 0xFD };
            try
            {
                bKey = System.Text.Encoding.UTF8.GetBytes(strEncrypt.Substring(0, 8));
                DESCryptoServiceProvider des = new DESCryptoServiceProvider();
                Byte[] inputByteArray = inputByteArray = Convert.FromBase64String(strText);
                MemoryStream ms = new MemoryStream();
                CryptoStream cs = new CryptoStream(ms, des.CreateDecryptor(bKey, IV), CryptoStreamMode.Write);
                cs.Write(inputByteArray, 0, inputByteArray.Length);
                cs.FlushFinalBlock();
                System.Text.Encoding encoding = System.Text.Encoding.UTF8;
                return encoding.GetString(ms.ToArray());
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// For use only with visual studio, this gets the project path environment variable
        /// NOTE: If %FXALARMPROJDIR% environment variable is not defined, then the directory where this application
        /// FX_Alarm.exe lives and contents COPIED UNDER the %USERPROFILE% user data files path will be used to set
        /// the environment variable %FXALARMPROJDIR%.
        /// </summary>
        /// <returns>The project path.</returns>
        private string GetProjectVar()
        {
            string projPath = null;
            if (!Directory.Exists(Environment.GetEnvironmentVariable(
                    "FXALARMPROJDIR", EnvironmentVariableTarget.Machine)))
            {
                string[] strDirs = Directory.GetDirectories(Environment.GetEnvironmentVariable("USERPROFILE",
                    EnvironmentVariableTarget.Process), "*", SearchOption.TopDirectoryOnly),
                    dirs = null, files = null;
                foreach (string str in strDirs)
                {
                    try
                    {
                        dirs = Directory.GetDirectories(str, "FX_Alarm", SearchOption.AllDirectories);
                    }
                    catch (Exception)
                    {
                        continue;
                    }
                    foreach (string subPath in dirs)
                        if (true == subPath.EndsWith("FX_Alarm"))
                        {
                            projPath = subPath;
                            try
                            {
                                files = Directory.GetFiles(projPath, "FX_Alarm.exe", SearchOption.AllDirectories);
                                DirectoryInfo info = Directory.GetParent(files[0]);
                                if (null != projPath && string.Empty != projPath && projPath == info.FullName)
                                {
                                    Environment.SetEnvironmentVariable("FXALARMPROJDIR", projPath, EnvironmentVariableTarget.Machine);
                                    break;
                                }
                            }
                            catch (Exception)
                            {
                                continue;
                            }
                        }
                    if (string.Empty != projPath && null != projPath)
                        break;
                }
            }
            return Environment.GetEnvironmentVariable("FXALARMPROJDIR", EnvironmentVariableTarget.Machine) + "\\";
        }
    } // End of public class GetUrlCoded : WebTest
} // End of namespace FX_Alarm
